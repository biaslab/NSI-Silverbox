using ForneyLab
using LinearAlgebra
import ForneyLab: SoftFactor, @ensureVariables, generateId, addNode!, associate!,
                  averageEnergy, Interface, Variable, slug, ProbabilityDistribution,
                  differentialEntropy, unsafeLogMean, unsafeMean, unsafeCov, unsafePrecision, unsafeMeanCov
import SpecialFunctions: polygamma, digamma
export GeneralisedFilterX, GFX, averageEnergy, slug

"""
Description:

    A node for transitions between states in generalised coordinates.

    1. A Gaussian mixture with mean-precision parameterization:

    ùí©(y | A(Œ∏,x) + B(Œ∑,u), V(Œ≥)),

    where A(x) = Sx + cg(x, Œ∏), B(Œ∑,u) = c Œ∑ u, and V(Œ≥) = Œ≥I

    with S = | 1  ‚Ä¶  Œît | ,  c = | 1 |
             |    ‚Ä¶  Œît |        | . |
             | 0      1 |        | 0 |

    Interfaces:
        1. y (output vector)
        2. Œ∏ (state coefficients)
        3. x (generalised coordinates)
        4. Œ∑ (control coefficients)
        5. u (exogenous input)
        6. Œ≥ (precision)

    Construction:
        GeneralisedFilterX(y, Œ∏, x, Œ∑, u, Œ≥, g=Function, id=:some_id)

    2. A deterministic state transition

        Œ¥(y - (A(Œ∏,x) + B(Œ∑,u))

        where A(x) = Sx + cg(x, Œ∏) and B(Œ∑,u) = c Œ∑ u

        with S = | 1  ‚Ä¶  Œît | ,  c = | 1 |
                 |    ‚Ä¶  Œît |        | . |
                 | 0      1 |        | 0 |

    Interfaces:
        1. y (output vector)
        2. Œ∏ (state coefficients)
        3. x (generalised coordinates)
        4. Œ∑ (control coefficients)
        5. u (exogenous input)

    Construction:
        GeneralisedFilterX(y, Œ∏, x, Œ∑, u, g=Function, id=:some_id)

"""

mutable struct GeneralisedFilterX <: SoftFactor
    id::Symbol
    interfaces::Vector{Interface}
    i::Dict{Symbol,Interface}

    g::Function # Scalar function between autoregression coefficients and state variable

    function GeneralisedFilterX(y, Œ∏, x, Œ∑, u, Œ≥; g::Function=x->x, Œît::Float=1., id=generateId(GeneralisedFilterX))
        @ensureVariables(y, x, Œ∏, Œ∑, u, Œ≥)
        self = new(id, Array{Interface}(undef, 6), Dict{Symbol,Interface}(), g)
        addNode!(currentGraph(), self)
        self.i[:y] = self.interfaces[1] = associate!(Interface(self), y)
        self.i[:x] = self.interfaces[2] = associate!(Interface(self), x)
        self.i[:Œ∏] = self.interfaces[3] = associate!(Interface(self), Œ∏)
        self.i[:Œ∑] = self.interfaces[4] = associate!(Interface(self), Œ∑)
        self.i[:u] = self.interfaces[5] = associate!(Interface(self), u)
        self.i[:Œ≥] = self.interfaces[6] = associate!(Interface(self), Œ≥)
        return self
    end

    function GeneralisedFilterX(y, Œ∏, x, Œ∑, u; g::Function=x->x, Œît::Float=1., id=generateId(GeneralisedFilterX))
        @ensureVariables(y, x, Œ∏, Œ∑, u)
        self = new(id, Array{Interface}(undef, 5), Dict{Symbol,Interface}(), g)
        addNode!(currentGraph(), self)
        self.i[:y] = self.interfaces[1] = associate!(Interface(self), y)
        self.i[:x] = self.interfaces[2] = associate!(Interface(self), x)
        self.i[:Œ∏] = self.interfaces[3] = associate!(Interface(self), Œ∏)
        self.i[:Œ∑] = self.interfaces[4] = associate!(Interface(self), Œ∑)
        self.i[:u] = self.interfaces[5] = associate!(Interface(self), u)
        return self
    end
end

slug(::Type{GeneralisedFilterX}) = "GFX"

function averageEnergy(::Type{GeneralisedFilterX},
                       marg_y::ProbabilityDistribution{Multivariate},
                       marg_x::ProbabilityDistribution{Multivariate},
                       marg_Œ∏::ProbabilityDistribution{Multivariate},
                       marg_Œ∑::ProbabilityDistribution{Univariate},
                       marg_u::ProbabilityDistribution{Univariate},
                       marg_Œ≥::ProbabilityDistribution{Univariate})

    #TODO
    error("not implemented yet")
end
